// @flow

const React = require('react');
const Button = require('./components/Button.react');
const Checkbox = require('./Components/Checkbox.react');
const RadioPicker = require('./Components/RadioPicker.react');
const {makeAction, isActionTypeQueued} = require('../simulation/actionQueue');
const {
  getQueen, getQueenBiteAction,
} = require('../selectors/misc');
const {
  layEgg, markDirt, bite, dash,
} = require('../thunks/queenThunks');

function AbilityControls(props: mixed): React.Node {
  const {dispatch, game, queen} = props;
  if (queen == null) return null;

  // Abilities
  const abilityIndex = game.config[queen.playerID]
    .queenAbilities
    .indexOf(queen.selectedAbility);
  const abilityLength = game.config[queen.playerID]
    .queenAbilities
    .length;
  let abilityDisplay = 'None';
  switch (queen.selectedAbility) {
    case 'MARK_DIRT':
      abilityDisplay = 'Dig';
      break;
    case 'MARK_CHAMBER':
      abilityDisplay = 'Dig Chamber';
      break;
    case 'MARK_DIRT_PUTDOWN':
      abilityDisplay = 'Mark Dirt Putdown';
      break;
    case 'JUMP':
      abilityDisplay = 'Dash';
      break;
    case 'AUTOPILOT':
      abilityDisplay = 'AutoEggs';
      break;
    case 'BURROW':
      abilityDisplay = 'Burrow Home';
      break;
    case 'WHIRLWIND':
      abilityDisplay = 'Whirlwind';
      break;
    case 'CREATE_RAID':
      abilityDisplay = 'Start Raid';
      break;
  }

  // Pheromones
  const pherIndex = game.config[queen.playerID]
    .queenPheromones
    .indexOf(queen.selectedPheromone);
  const pherLength = game.config[queen.playerID]
    .queenPheromones
    .length;
  let pherDisplay = 'None';
  switch (queen.selectedPheromone) {
    case 'QUEEN_ALERT':
      pherDisplay = 'Alert';
      break
    case 'QUEEN_PHER':
      pherDisplay = 'Follow';
      break;
    case 'SUPPRESS':
      pherDisplay = 'Suppress';
      break;
    case 'EXPAND':
      pherDisplay = 'Expand';
      break;
    case 'CONTRACT':
      pherDisplay = 'Contract';
      break;
    case 'PATROL_DEFEND_PHER':
      pherDisplay = 'Rally';
      break;
    case 'DOMESTICATE':
      pherDisplay = 'Domesticate';
      break;
    case 'QUEEN_DISPERSE':
      pherDisplay = 'Force Retreat';
      break;
  }

  // Egg Laying
  const casteIndex = game.config[queen.playerID]
    .queenLayingCastes
    .indexOf(queen.selectedCaste);
  const casteLength = game.config[queen.playerID]
    .queenLayingCastes
    .length;
  let casteDisplay = 'None';
  switch (queen.selectedCaste) {
    case 'MINIMA':
      casteDisplay = (<span>Lay <b>Worker</b> Egg (V)</span>);
      break;
    case 'YOUNG_QUEEN':
      casteDisplay = (<span>Lay <b>Young Queen</b> Egg (V)</span>);
      break;
    case 'MEDIA':
      casteDisplay = (<span>Lay <b>Major</b> Egg (V)</span>);
      break;
    case 'MAJOR':
      casteDisplay = (<span>Lay <b>Super Major</b> Egg (V)</span>);
      break;
    case 'HONEY_POT':
      casteDisplay = (<span>Lay <b>Honey Pot</b> Egg (V)</span>);
      break;
    case 'SOLDIER':
      casteDisplay = (<span>Lay <b>Soldier</b> Egg (V)</span>);
      break;
    case 'SUB_MINIMA':
      casteDisplay = (<span>Lay <b>Minima</b> Egg (V)</span>);
      break;
    case 'QUEEN':
      casteDisplay = (<span>Lay <b>Queen</b> Egg (V)</span>);
      break;
    case 'EGG TOKEN':
      casteDisplay = 'Egg Token';
      break;
    case 'LARVA TOKEN':
      casteDisplay = 'Larva Token';
      break;
    case 'PUPA TOKEN':
      casteDisplay = 'Pupa Token';
      break;
    case 'DIRT TOKEN':
      casteDisplay = 'Dirt Token';
      break;
    case 'COLONY TOKEN':
      casteDisplay = 'Food Token';
      break;
  }

  // Bite label
  let biteLabel = getQueenBiteAction(game, queen).type;
  biteLabel = biteLabel[0] + biteLabel.slice(1).toLowerCase();

  const antSegmentStyle = {
    display: 'inline-block',
    backgroundColor: 'steelblue',
    border: '1px solid black',
    borderRadius: '50%',
    boxShadow: '1px 1px',
    marginRight: 8,
  };
  return (
    <span>
      <div style={{
        height: 30,
        pointerEvents: 'all',
      }}>
        <Button
          style={{
            position: 'absolute',
          }}
          label={biteLabel + " (E)"}
          disabled={game.hotKeys.keysDown.E}
          onClick={() => {
            bite(dispatch, game);
          }}
        />
      </div>
      <div>
        <div
          style={{
            ...antSegmentStyle,
            marginLeft: 2,
            marginRight: 8 + 3,
            width: 30,
            height: 25,
            textAlign: 'center',
            paddingTop: 5,
            pointerEvents: 'all',
          }}
        >
        </div>
          {abilityLength == 0 ? null :
          <div
            style={{
              display: 'inline-block',
              position: 'absolute',
              pointerEvents: 'all',
            }}
          >
            <Button
              label={abilityDisplay + " (R)"}
              disabled={
                (queen.selectedAbility == 'CREATE_RAID' && game.raidCooldown > 0)
              }
              depressed={queen.abilityActive}
              onMouseDown={() => {
                const active = queen.selectedAbility == 'AUTOPILOT'
                  ? !!!queen.autopilot
                  : true;
                dispatch({type: 'SET_ABILITY_ACTIVE',
                  active, playerID: queen.playerID,
                });
                if (queen.selectedAbility === 'MARK_DIRT') {
                  markDirt(dispatch, game, game.playerID);
                }
                if (queen.selectedAbility == 'JUMP') {
                  dash(dispatch, game);
                }
                if (queen.selectedAbility == 'WHIRLWIND') {
                  if (!isActionTypeQueued(queen, 'WHIRLWIND')) {
                    const entityAction = makeAction(game, queen, 'WHIRLWIND');
                    dispatch({type: 'ENQUEUE_ENTITY_ACTION', entity: queen, entityAction});
                  }
                }
              }}
              onMouseUp={() => {
                if (
                  queen.selectedAbility != 'AUTOPILOT' && queen.selectedAbility != 'CREATE_RAID'
                ) {
                  dispatch({type: 'SET_ABILITY_ACTIVE',
                    active: false, playerID: queen.playerID,
                  });
                }
              }}
            />
            {abilityLength <= 1 ? null :
              <Button
                label='> (T)'
                onClick={() => {
                  dispatch({type: 'SET_SELECTED_ABILITY', playerID: queen.playerID,
                    ability: game.config[queen.playerID]
                    .queenAbilities[(abilityIndex + 1) % abilityLength],
                  });
                }}
              />
            }
          </div>
        }
      </div>
      <div
        style={{
          width: 450,
        }}
      >
        <div
          style={{
            ...antSegmentStyle,
            marginLeft: 7,
            marginRight: 8 + 8,
            width: 20,
            height: 22,
            textAlign: 'center',
            paddingTop: 5,
            pointerEvents: 'all',
          }}
        >
          <div
            style={{
              marginLeft: -4.5,
            }}
          >
          </div>
        </div>
        {pherLength == 0 ? null :
        <div
          style={{
            display: 'inline-block',
            position: 'absolute',
            pointerEvents: 'all',
          }}
        >
          <Button
            label={pherDisplay + " (F)"}
            depressed={queen.pheromoneActive}
            onClick={() => {
              const active = !queen.pheromoneActive;
              dispatch({type: 'SET_PHEROMONE_ACTIVE',
                active, playerID: queen.playerID,
              });
            }}
          />
          {pherLength <= 1 ? null :
            <Button
              label='> (G)'
              onClick={() => {
                dispatch({type: 'SET_SELECTED_PHEROMONE', playerID: queen.playerID,
                pheromone: game.config[queen.playerID]
                  .queenPheromones[(pherIndex + 1) % pherLength],
                });
              }}
            />
          }
        </div>
        }
      </div>
      <div>
        <div
          style={{
            ...antSegmentStyle,
            width: 35,
            height: 30,
            textAlign: 'center',
            paddingTop: 10,
          }}
        >
          {queen.eggCharges}
        </div>
        <div
          style={{
            display: 'inline-block',
            position: 'absolute',
            pointerEvents: 'all',
          }}
        >
          <Button
            disabled={queen.eggCharges == 0}
            id={'eggLayingButton'}
            label={casteDisplay}
            onClick={() => layEgg(dispatch, game, game.playerID)}
          />
          {game.config[queen.playerID].queenLayingCastes.length <= 1 ? null :
          <Button
            label='> (B)'
            onClick={() => {
              dispatch({type: 'SET_LAYING_CASTE', playerID: queen.playerID,
              caste: game.config[queen.playerID]
                .queenLayingCastes[(casteIndex + 1) % casteLength],
              });
            }}
          />}
        </div>
      </div>
    </span>
  );
}

module.exports = AbilityControls;
